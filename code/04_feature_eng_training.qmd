---
title: "04_feature_eng_training"
format: html
editor: visual
---

## 

# Load libraries

```{r}
library(tidyverse)
library(janitor)
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(viridis)
library(gstat)
library(raster)
library(stars)
library(cubelyr)
library(mapview)
```

# import data

```{r}
train_grouped <- read_csv("../data/processed/training-data-cleaned.csv")

train_grouped
```

# merge weather with planting/harvesting dates

```{r}
library(tidyverse)
library(lubridate)

# Add DOY (day of year) to planting/harvest
train_dates <- train_grouped %>%
  dplyr::select(hybrid, site, year, yield_adj_mg_ha)

```

# Import weather data

```{r}
weather_f <- read_csv("../data/weather_partial.csv") %>% 
  clean_names() %>%
  mutate(month = format(as.Date(as.Date(yday - 1, origin = paste0(year, "-01-01"))), "%m")) %>%
  dplyr::select(site, year, lat, lon, month, yday, dayl_s, prcp_mm_day, srad_w_m_2, tmax_deg_c, tmin_deg_c, vp_pa)
    
  

weather_f
summary(weather_f)
unique(weather_f$year)
```

# Join site-year info to weather

```{r}
# Join site-year info to weather
weather_gs <- weather_f %>%
  left_join(train_dates, by = c("site", "year"))%>%
  na.omit(yield_adj_mg_ha) 

  

weather_gs

```

```{r check summary}
summary(weather_gs)
unique(weather_gs$site)

```

# Lets calculate GDD

We are using degday package.

EDIT: The original plan was to use GDD as a predictor, and this was the code we developed to calculate and summarize by month, using the double sien method. However, due to the technical difficulties with pulling weather for 2024, we had to use the data that Umar shared, which was already summarized by month and thus we were unable to use that to compute GDDs.

The code below was left as comments for documentation purposes.

```{r}
#install.packages("degday")
#library(degday)
```

```{r Add next day's tmin (required for the double sine model)}
#weather_gdd <- weather_gs %>%
#  arrange(site, year, hybrid, yday) %>%
#  group_by(site, year, hybrid) %>%
#  mutate(tmin_next = lead(tmin_deg_c, 1)) %>%
#  ungroup()

#weather_gdd
```

```{r Calculate gdd_dbl_sine with {degday}}


#unique_sites <- unique(weather_gdd$site)

#gdd_list <- lapply(unique_sites, function(s) {
#  weather_gdd %>%
#    filter(site == s) %>%
#    group_by(site, year, hybrid) %>%
#    arrange(yday) %>%
#    mutate(
#      tmin_next = lead(tmin_deg_c),
#      gdd_dbl_sine = dd_dbl_sine(tmin_deg_c, tmax_deg_c, tmin_next, 10, 100)
#    )
#})

#gdd_list

```

```{r bind rows}
#weather_gdd_final <- bind_rows(gdd_list)

#weather_gdd_final

```

```{r}
# summary(weather_gdd_final)
```

# Revisiting the weather GDD

```{r check number of rows}
# weather_gdd_final %>%
#  filter(yday < plant_doy | yday > harvest_doy) %>%
#  nrow()

```

```{r}
 weather_gs %>%
  count(site, year, hybrid) %>%
  arrange(desc(n))  # Should be ~days in growing season (e.g. 120â€“160)

```

```{r}
#weather_gdd_final %>%
#  filter(is.na(gdd_dbl_sine) | is.na(yield_adj_mg_ha)) %>%
#  nrow()

```

```{r check if there are duplicates for the hybrid}
weather_gs %>%
  count(site, year, hybrid, yday) %>%
  filter(n > 1) %>%
  arrange(desc(n))


```

Yes, there are duplicates. Now, lets clean that up. We will slice the first row.

```{r}
weather_gs_dedup <- weather_gs %>%
  arrange(site, year, hybrid, yday) %>%
  group_by(site, year, hybrid, yday) %>%
  slice(1) %>%
  ungroup()

```

```{r cleaned up the duplicates}
weather_gs_dedup %>%
  count(site, year, hybrid, yday) %>%
  filter(n > 1)  # This should now return 0

```

```{r create month object}
month_train <- weather_gs_dedup %>%
  # Selecting needed variables
  dplyr::select(year, site, hybrid, lat, lon,
                yield_adj_mg_ha,
                yday,
                dayl_s, 
                prcp_mm_day,
                srad_w_m_2, 
                tmax_deg_c, 
                tmin_deg_c,
                vp_pa
                ) %>%
  # Creating a date class variable  
  mutate(date_chr = paste0(year, "/", yday)) %>%
  mutate(date = as.Date(date_chr, "%Y/%j")) %>%
  # Extracting month from date  
  mutate(month = month(date)) %>%
  mutate(month_abb = month(date, label = TRUE))

month_train
```

```{r summarize by month}
month_train_sum <- month_train %>%
  dplyr::select(-date, -month) %>%
  group_by(year, site, month_abb) %>%
  summarise(across(.cols = c(dayl_s,
                             srad_w_m_2,
                             tmax_deg_c,
                             tmin_deg_c,
                             vp_pa,
                             ),
                   .fns = mean,
                   .names = "mean_{.col}"
                   ),
            across(.cols = prcp_mm_day,
                   .fns = sum,
                   .names = "sum_{.col}")
            ) %>% 
  ungroup()


month_train_sum
```

```{r gdd summary (97,800 observations)}
#gdd_summary <- weather_gdd_final_dedup %>%
#  group_by(site, year, hybrid) %>%
#  summarise(
#    gdd_total_dbl_sine = sum(gdd_dbl_sine, na.rm = TRUE),
#    .groups = "drop"
#  )

```


```{r make weather data wide}

month_train_sum_wide <- month_train_sum %>%
  pivot_longer(cols = mean_dayl_s:sum_prcp_mm_day) %>%
  mutate(varname = paste0(name, "_", month_abb)) %>%
  dplyr::select(-name, -month_abb) %>%
  pivot_wider(names_from = varname,
              values_from = value)
  
month_train_sum_wide

```

# Summarize weather by month, fit to yield


```{r after adding days to harvest: no. of observations: 117872}
train_ready <- train_grouped %>%
  dplyr::select(site, year, hybrid, yield_adj_mg_ha, grain_moisture, days_to_harvest) %>%
  left_join(month_train_sum_wide, by = c("site", "year")) %>%
  na.omit(yield_adj_mg_ha)

```

```{r lets summrize the weather data}
#weather_summary <- weather_gs_dedup %>%
 # group_by(site, year, hybrid) %>%
  #summarise(
   # total_precip_mm = sum(prcp_mm_day, na.rm = TRUE),
  #  mean_solar_rad = mean(srad_w_m_2, na.rm = TRUE),
   # mean_tmax = mean(tmax_deg_c, na.rm = TRUE),
  #  mean_tmin = mean(tmin_deg_c, na.rm = TRUE),
  #  mean_vapor_pressure = mean(vp_pa, na.rm = TRUE),
  #  mean_daylength_s = mean(dayl_s, na.rm = TRUE),
   # .groups = "drop"
  #)

```

```{r}
#train_ready <- train_ready %>%
#  left_join(weather_summary, by = c("site", "year", "hybrid"))

```

```{r}
glimpse(train_ready)
summary(train_ready)

```

```{r}
#missing_weather <- train_ready %>%
#  filter(is.na(gdd_total_dbl_sine.x)) %>%
#  dplyr::select(site, year, hybrid)

# See how many unique rows
#nrow(missing_weather)

# View sample
#head(missing_weather, 10)

```

```{r}
#weather_summary %>%
#  filter(hybrid == "2369/DK3IIH6")

```

```{r}
#train_dates %>%
#  filter(hybrid == "2369/DK3IIH6")

```

```{r}
#weather_gdd_final_dedup %>%
#  filter(hybrid == "2369/DK3IIH6") %>%
#  distinct(site, year, hybrid)

```

# Add soil data

```{r import soil}
soilraw <- read.csv("../data/raw/training_soil.csv")

soilraw
```

```{r clean site names}
library(stringr)

soilraw$site <- sub("_[0-9]{4}$", "", soilraw$site)

  
soilraw
```


```{r join soil data}
train_ml_ready <- train_ready %>%
#  dplyr::select(site, year, hybrid, yield_adj_mg_ha, grain_moisture, days_to_harvest) %>%
  left_join(soilraw, by = c("site", "year")) %>%
  dplyr::select(site, year, hybrid, yield_adj_mg_ha, grain_moisture, soilpH, om_pct, soilk_ppm, soilp_ppm, everything()) %>%
 na.omit
  
train_ml_ready

```

```{r double check free of NAs}
summary(train_ml_ready)
```

All good, export for training ML

```{r}
write.csv(train_ml_ready, "../data/processed/training-data-ml-ready.csv", row.names = FALSE)
```
